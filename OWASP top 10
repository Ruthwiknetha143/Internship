OWASP(Open worldwide application security project) is a non-profit organization that helps to provide guidelines or a framework for development and maintenance of trustworthy 
applications. Done by including free publicly available documents, videos and case studies regarding web application security vulnerabilities and the most notable one being the 
OWASP top 10.

OWASP TOP 10:
It is a standard document used by developers to understand the possible and most notable risks and vulnerabilities that are needed to be kept in mind while development. 
This document helps in a more secure coding practice across all the organizations (As it is open-source).

OWASP top 10 vulnerabilities as of 2021 are:

1. Broken Access control: This vulnerbility can be defined as gaining access or privileges over something attackers are not supposed to have by which confidential information may 
    be disclosed and chaos can be emerged. Basically unauthorized access to confidential resources or information.
    __Caused by:
        - violation of deny by default
        - authentication flaws
        - authorization issues
        - injection vulnerabilities
        - CORS misconfiguration
        - metadata manipulation
    __Impacts:
        - Data breaches
        - compliance failures
        - operational disruptions
        - privilege escalations
    __Prevention:
        - access validation
        - regular reviews
        - function-level access controls

2. Cryptographics failures: Any failure responsible for the exposure of sensitive and critical data to an unauthorized entity. (Probably during transit)
    __Caused by:
        - hard-coded passwords
        - insufficient entropy(randomness)
        - Broken/risky crypto algorithm
    __Impacts:
        - Man-in-the-middle attacks
        - Data breaches and leaks
        - Damaged reputation and trust
    __Prevention:
        - usage of strong encryption keys
        - Authenticated encryption
        - using most updated cryptographic algorithms
        - Disabling caching for sensitive data

3. Injection: Exploiting unsanitized queries in the input widgets of an application to retrieve sensitive data/confidential information.
    __Caused by:
        - No validation of user input
        - SQL injection
        - XSS attacks
    __Impacts:
        - Data theft
        - Legal effects
        - Financial losses
    __Prevention:
        - usage of non-interpreter APIs
        - input validation
        - principle of least privilege
        - LIMIT in SQL to prevent mass data breach

4. Insecure design: (not insecure implementation) failure in determining the level of security required which may lead to poor defense against attacks even when the implementation
    is top-notch. (A broader topic)
    __Caused by:
        - Insufficient data validation
        - Insecure data storage/data protection
        - Improper communication
        - Poor error handling
    __Impacts:
        - Bypassing Authentication mechanisms
        - Data mining for sensitive information
        - Complete account takeover
    __Prevention:
        - Regular security auditing
        - Strong security controls
        - Continuous monitoring and Testing

5. Security Misconfiguration: insecure security options or settings that don't maximize the security posture of an application
    __Caused by:
        - Improper permissions & unnecessary features
        - Default account passwords
        - Outdated/Vulnerable softwares usage
        - Error handling
    __Impacts:
        - Data breaches/Loss
        - Financial loss
        - Legal penalties
        - Reputational damage
    __Prevention:
        - constant testing to build new environments with different credentials
        - Minimal platforms
        - Patch management
        - Security headers and automations for verification

6. Vulnerable and outdated components: self-explanatory
    __Caused by:
        - usage of vulnerable, unsupported and outdated software for critical tasks
        - Fixing, patching or upgrading delays/omission
        - Absence of scanning and testing of compatability of updates
    __Impacts:
        - Distributed Denial-of-Service
        - Remote code execution attacks
        - Data integrity violations
    __Prevention:
        - removing unnecessary dependencies, features
        - Obtain signed and official components from official and trusted links
        - Security patches

7. Identification and authentication failures: Failed to confirm the user's identity, auth and session management
    __Caused by:
        - Permitted credential stuffing & brute forcing
        - 
