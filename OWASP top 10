OWASP(Open worldwide application security project) is a non-profit organization that helps to provide guidelines or a framework for development and maintenance of trustworthy 
applications. Done by including free publicly available documents, videos and case studies regarding web application security vulnerabilities and the most notable one being the 
OWASP top 10.

OWASP TOP 10:
It is a standard document used by developers to understand the possible and most notable risks and vulnerabilities that are needed to be kept in mind while development. 
This document helps in a more secure coding practice across all the organizations (As it is open-source).

OWASP top 10 vulnerabilities as of 2021 are:

1. Broken Access control: This vulnerbility can be defined as gaining access or privileges over something attackers are not supposed to have by which confidential information may 
    be disclosed and chaos can be emerged. Basically unauthorized access to confidential resources or information.
    __Caused by:
        - violation of deny by default
        - authentication flaws
        - authorization issues
        - injection vulnerabilities
        - CORS misconfiguration
        - metadata manipulation
    __Impacts:
        - Data breaches
        - compliance failures
        - operational disruptions
        - privilege escalations
    __Prevention:
        - access validation
        - regular reviews
        - function-level access controls

2. Cryptographics failures: Any failure responsible for the exposure of sensitive and critical data to an unauthorized entity. (Probably during transit)
    __Caused by:
        - hard-coded passwords
        - insufficient entropy(randomness)
        - Broken/risky crypto algorithm
    __Impacts:
        - Man-in-the-middle attacks
        - Data breaches and leaks
        - Damaged reputation and trust
    __Prevention:
        - usage of strong encryption keys
        - Authenticated encryption
        - using most updated cryptographic algorithms
        - Disabling caching for sensitive data

3. Injection: Exploiting unsanitized queries in the input widgets of an application to retrieve sensitive data/confidential information.
    __Caused by:
        - No validation of user input
        - SQL injection
        - XSS attacks
    __Impacts:
        - Data theft
        - Legal effects
        - Financial losses
    __Prevention:
        - usage of non-interpreter APIs
        - input validation
        - principle of least privilege
        - LIMIT in SQL to prevent mass data breach

4. Insecure design: (not insecure implementation) failure in determining the level of security required which may lead to poor defense against attacks even when the implementation
    is top-notch. (A broader topic)
    __Caused by:
        - Insufficient data validation
        - Insecure data storage/data protection
        - Improper communication
        - Poor error handling
    __Impacts:
        - Bypassing Authentication mechanisms
        - Data mining for sensitive information
        - Complete account takeover
    __Prevention:
        - Regular security auditing
        - Strong security controls
        - Continuous monitoring and Testing

5. Security Misconfiguration: insecure security options or settings that don't maximize the security posture of an application
    __Caused by:
        - Improper permissions & unnecessary features
        - Default account passwords
        - Outdated/Vulnerable softwares usage
        - Error handling
    __Impacts:
        - Data breaches/Loss
        - Financial loss
        - Legal penalties
        - Reputational damage
    __Prevention:
        - constant testing to build new environments with different credentials
        - Minimal platforms
        - Patch management
        - Security headers and automations for verification

6. Vulnerable and outdated components: self-explanatory
    __Caused by:
        - usage of vulnerable, unsupported and outdated software for critical tasks
        - Fixing, patching or upgrading delays/omission
        - Absence of scanning and testing of compatability of updates
    __Impacts:
        - Distributed Denial-of-Service
        - Remote code execution attacks
        - Data integrity violations
    __Prevention:
        - removing unnecessary dependencies, features
        - Obtain signed and official components from official and trusted links
        - Security patches

7. Identification and authentication failures: Failed to confirm the user's identity, auth and session management
    __Caused by:
        - Permitted credential stuffing & brute forcing
        - Permitting default or weak passwords
        - Ineffective credential recovery or Multi-factor authentication
    __Impacts:
        - Entire system compromise
        - persistent system level threats
        - Data theft
    __Prevention:
        - Implement weak password checks
        - Implement rules for password creation
        - limit login attempts
        - Use better and well controlled recovery methods and MFAs

8. Software and data integrity failures: A built code or infrastructure which does not protect against integrity violations i.e, code or infrastructure that is flawed but 
    deployed which leads to usage of non-verified data/programs
    __Caused by:
        - using untrusted repos, CDNs
        - auto update without integrity check
        - structured encoding leading to finding patterns
    __Impacts:
        - Misguided decisions
        - inefficient operations
        - loss of competitive advantage
    __Prevention:
        - Usage of digital signatures to verify the authenticity
        - Component dependency checks are need to be done
        - Well-defined integrity verification process for code and infrastructure

9. Security logging and monitoring failures: failure to monitor, detect, logging, escalate and respond to active breaches
    __Caused by:
        - Failure of efficient log storage such as storing logs locally, no logs created altogether
        - Code/program failure to detect attacks in real-time
        - Alerting system are not efficiently built
    __Impacts:
        - Data manipulation
        - Difficulty in forensic analysis
        - Delayed/Inability to detection of attacks
    __Prevention:
        - Efficient and shared log management with validated data
        - Encoded logs to prevent leak during injections/BAC
        - Effective monitoring with incident response and recovery team

10. Server-side request forgery(SSRF): Targets the server and includes making request to the server-side with modified URL to unintended resources
    __Caused by:
        - Failure to sanitize/validate input
        - Misconfigured proxies
        - Inadequate logging and monitoring
    __Impacts:
        - Data exposure
        - Internal network scanning
        - Chaining attacks with RCE/XSS
    __Prevention:
        - Well configured firewalls (deny by default, logging all network flows)
        - Using allow list with valid URL schema, port, and destination
        - Disable HTTP redirections
