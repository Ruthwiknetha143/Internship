---> Bash (Bourne Again SHell) - It is a developed version of Bourne shell which is mainly used in UNIX based/LINUX based kernals to interact with the hardware of the
  Operating system

- Always start the script with a shebang --> #!/bin/bash
- shebang allows for the usage of bash language in the the file being created
- Be sure to understand that the syntax of all the command and statements are case-sensitive and space-sensitive

- Basic commands:
  + echo "some message" - basically print command
  + $<variable_name> - for calling variables in the echo command (can be reassigned within the same script)
  + read <variable_name> - used to take input of the user and storing it in the variable
    read -p "some message" <variable> - taking input with a prompt message and storing it in the variable
  + exit <error_code> - <error_code> needs to be apt for basic usage

Note: There are several in-build variables such as $SHELL, $RANDOM, $PWD, which can be used as well for the scripting. Also you can add your own variables and make it 
  available across the system by adding it in the .bashrc file, which can be found in the /root directory

- Arithmetic operations:
  + $(()) - Always be sure to cover your arithmetic operations in this parenthesis for the shell to interpret that there is arithmetic operation going on

  + LOGICAL OPERATORS

    && - AND
    || - OR

  + TEST OPERATORS

    Integers -> -eq, -ne, -lt, -le, -gt, -ge [ <= and >= used in (()) ]
    Strings -> =, ==, !=, >, <, -Z(null), -n(not-null)

  + (( ++/-- <variable> ++/--/** )) - increment/decrement/exponent

- Conditional statements:
  + IF STATEMENT
    ____________
    if [[ <variable> == <some_variable/input> ]]; then              
          //statement
    else
          //statement
    fi

  + NESTED IF
    _________
    if [[ //same ]]; then
          if [[ //same ]]; then
                //statement
          fi

  + ELSE-IF STATEMENT
    _________________
    if [[ //same ]]; then
          //statement
    elif [[ //same ]]; then
          //statement
    else
          //statement
    fi

  + SWITCH CASE
    ___________
    case $<input_variable> in
          <input_1>)
                    //statements
                    ;;
          <input_2>)
                    //statements
                    ;;
          //so on (for your number of choices)
    esac

  Note: Test operators in the conditions need to be changed for integers and strings accordingly

- Looping statements:
  + WHILE LOOP (runs while a condition is true)
    __________
    while [[ //condition ]]
    do
        //statements
    done

  + UNTIL LOOP (runs until a condition is met)
    __________
    until [[ //condition ]]
    do
        //statements
    done

  + FOR LOOP
    ________
    for <variable> in {range};
    do
        //statements
    done

    Note: There are other commands like continue and break, which can be used to change the behaviour of the loops
