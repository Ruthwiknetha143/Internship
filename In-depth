---> A1 -- Broken Access control - Failure to enforce access controls which leads to unauthorized access which is broken (flawed) and can be exploited for control over confidential,
  or personally identifiable information of customers or potential high privileges of adminstrators leading to misuse of power for personal gain

-types of access controls
  1. Vertical access controls - The privileges of an admin cannot be utilized by low-level users of the application
  2. Horizontal access controls - The privileges set to a user cannot be utilized by another same-level user as it invokes the privacy of the user being exploited
  3. Contextual access controls - This is when privileges for a user are set dynamically. Consider a cart consisting of some items, after payment if you remove an items it does 
      not work as the item is already bought

-types of access control security models
  1. Role-based - Specific privileges given based on the role's responsibility
  2. Discretionary-based - A user can share his privileges based off of permissions set to specific users
  3. Mandatory - Based off of level of sensitivity a user if working at

- types of vulnerabilities
  1. URL manipulation (The base) - The name itself suggests that when a URL of website is modified to get privileges to an admin or other legitimate users without any authorization,
      and if the application does not verify the access rights of that URL, then sensitive data can be retrieved/escalated privileges can be exploited by the attacker
      
      Example - If a website has a user access URL of website.com/user/123 and if the URL is modified to get admin user to acquire privileges by website.com/user/admin. And if the 
      website does not check the authorization of the user to access this information then automatically it can be classified as the broken access control as the power of the user
      admin can now be easily exploited by the this vulnerability which is not supposed to be possible in the first place

      This vulnerability is mostly carried out in the URL, which is used to locate sub-domains of a website. And almost each functionality of the website is affected by this 
      vulnerability by unsanitized acceptance of the user input at front-end, unauthorized retrieval of the URL resource at the back-end

  2. Insecure Direct object references (IDOR) - Every application has some direct references to internal implementation objects and if they are exposed they can be exploited for 
      broken access to resources without any admin rights

      Example - Basically this is also URL manipulation. If a website exposes it's URL paths to file storage locations by website.com/viewfile?_file-no=123, then the attacker can 
      potentially change the url to website.com/viewfile?_file-no=456 can if proper validation and authorization policies are not set then sensitive files are accessed by the 
      attacker or website.com/deletefile?_file-no=456 which permanently deletes the file 456 without any authorization

      This vulnerability is also mostly carried out in the URL of the website and can significantly affect all the functionalities of the website, the exploitation of unsanitized 
      user input in the front-end, the non validated resource responses to the request at the back-end

      Contains two object references: Iterable object identifier(these are simple sequential identifier which can be easily exploited by guessing the next identifier, ex: 123,456)
      and Complex object identifier(which are hard to guess ex: 4f5e6d7c8b9a : mostly due to hashing)

  3. Privilege escalation - A low-level user is given admin privileges by exploiting the above techniques to potentially blame the admin for the vulnerabilities or just exploit 
      the privileges for personal gain. Not to much of a priority
=============================================================================================
---> A2 -- Cryptographics failures - This occurs when weaknesses in the implementation or use of cryptography lead to unintended exposure or alteration of sensitive information 
  (most probably during transit)

- types of cryptography
  1. Encryption - converting a plain text into cipher text
  2. Symmetric key encryption - converting a plain text into cipher text with the usage of a public key common to both the user in the transmission process and need to be kept a
      secret as the convertion back to the plain text is also done by the same key
  3. Asymmetric key encryption - converting a plain text into cipher text with the usage of a public key at sender's end and converting back into the plain text by the usage of a 
      private key at receiver's end
  4. Hashing - Creation of a fixed-size unique value called the hash-values for a given input or message by the uasge of some mathematical expressions

- types of vulnerabilities
  1. Insecure key management - Keys are the main tools which are used to encrypt and decrypt the messages during transmission. And to acquire such key with maximum entorpy and
      uniqueness, organizations generally approach a certificate authority to apply for a certificate. After careful consideration a certificate is presented to the organization 
      which consists of keys (symmetric/asymmetric) which can be used for the encryption and decryption purpose and if these keys are not managed securely then a major security
      threat can emerge. There are 2 main types of Insecure key management

      - Key reuse - certificate authorities tend to publish the same keys which are already being used by an organization or previously used or is revoked or comprimised. This is
        done to save on storage space for new keys but can be serious threat if attackers get to know about the publishing of the same keys. They can decode the encryption process
        and decrypt the transmitting messages while transmission, this can be a serious security and privacy risk

      - Insecure key generation - Alongside the vulnerability of using the same keys for the algorithms, if the keys are not generated random enough by the certificate authority,
        then this can also lead to predictable encryption process which can be used as leverage by the attackers to predict the decryption process. This kind of generation is 
        done by the certificate authorities to save up on the storage space of the keys by measures like creating fixed-size random keys, etc.

      This kind of vulnerability is basically the fault of the certificate authorities who issue this keys as it is their ignorance/unwillingness to store keys which can lead to 
      catastrophic incidence. And a bit of fault can also be imposed upon the organization who buy this certificates and do not understand or recognize the repeating pattern to take
      appropriate measures against these vulnerabilities

  2. Broken cryptography - Usage of weak, outdated cryptographic algorithms can lead to easier prediction of the decryption process which can lead to data leakage, some of the old  
      cryptographic algorithms like RC2, MD4, MD5, SHA1 are old, weak and outdated algorithms and if used by the organization can lead to easier prediction of the decryption process
      by the attackers

      Example - SHA1 a deprecated hashing algorithm, if used can be exploited by using a technique called collision, basically SHA1 hashing algorithm creates a digest or hash value
      which can be used to prove the authenticity of the document in the question and in SHA1 a bad document can be carefully crafted to produce the same hashing value as the good
      document and this is a serious threat as a good contract can be intercepted and hashed with a bad contract for personal gains.

      The fault of this vulnerability to exist in of the frontend development, as not using latest, updated and trusted cryptographic algorithms is mainly affecting the actual 
      connection or transmission of data in frontend-level from one client to another. This vulnerability is mainly exploited during the transmission of data by man-in-the-middle
      attack

  3. Insufficient entropy - Basically insufficient randomness. And there are some affected function which include

      - Predictable initialization vector(IV) - IV are used to create a randomness to the text being encrypted to make sure that repeated encryption of the same text yield different
        cipher texts. An IV is integrated into the plain-text before encryption (XOR operation) and then sent to the encryption process. By this approach a randomized plain text is
        encrypted and the cipher text is sent along with the initialization vector to the receiving end at which after decryption the output is XOR'ed with the IV to get the true
        plain-text. It should be duly noted that every plain-text is given a different initialization vector and the vulnerability arises if these IVs are predicted to be reused,
        or just simply incremented for every message and this could arise a vulnerability of the attacker making an educated guess about the plain-text structure

      - RNGs and PRNGs - Random number generator and Pseudo-random number generator are typically used to create the values for the keypairs or the initialization vectors. Basically
        RNGs used physical devices randomness to generate some random key number which can be used to create the keypairs or IV and PRNGs use mathematical expressions to generate
        the random numbers by the usage of a seed(which is an anchor such as system time, random value etc). And in RNG, if insufficient entropy is detected from physical devices 
        or limited devices are used to generate the numbers, then it may lead to a vulnerability of guessing the next RNG generation and in the case of PRNG, if the seed are to be 
        reused then the next PRNG generated values can be predicted which is a serious threat to the keypair values and the IVs being generated by the help of them
